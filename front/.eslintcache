[{"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/index.js":"1","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/App.js":"2","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/reportWebVitals.js":"3","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/header.js":"4","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/content.js":"5","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/footer.js":"6","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/regist.js":"7","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/til.js":"8","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/board.js":"9","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/boardInput.js":"10","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/content_attendance.js":"11","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/modal.js":"12","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/boardDetail.js":"13"},{"size":585,"mtime":1613122527814,"results":"14","hashOfConfig":"15"},{"size":2726,"mtime":1613631857603,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1612342785593,"results":"17","hashOfConfig":"15"},{"size":2353,"mtime":1613552681424,"results":"18","hashOfConfig":"15"},{"size":3006,"mtime":1613552360641,"results":"19","hashOfConfig":"15"},{"size":255,"mtime":1613119408634,"results":"20","hashOfConfig":"15"},{"size":3504,"mtime":1613486288319,"results":"21","hashOfConfig":"15"},{"size":240,"mtime":1613122527813,"results":"22","hashOfConfig":"15"},{"size":1616,"mtime":1613642488636,"results":"23","hashOfConfig":"15"},{"size":1692,"mtime":1613488421821,"results":"24","hashOfConfig":"15"},{"size":1656,"mtime":1613486288319,"results":"25","hashOfConfig":"15"},{"size":825,"mtime":1613552360642,"results":"26","hashOfConfig":"15"},{"size":793,"mtime":1613642717116,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"12ums7s",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/index.js",[],["60","61"],"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/App.js",[],"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/reportWebVitals.js",[],"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/header.js",["62","63"],"import React, { Component, useState } from \"react\"\nimport profile from \"../assets/image/Dog_23.png\"\nimport { NavLink } from \"react-router-dom\"\nimport Modal from \"./modal\"\n\nclass Header extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { show: false, setShow: false }\n  }\n\n  handleShow() {\n    this.setState({\n      setShow: true,\n    })\n  }\n  handleClose() {\n    this.setState({\n      setShow: false,\n    })\n  }\n\n  render() {\n    console.log(\"Header render\")\n    return (\n      <div class=\"main-nav\">\n        <p class=\"main-logo\">\n          <NavLink to=\"/\">J2KB</NavLink>\n        </p>\n        <span className=\"flexgrowBlank\"></span>\n        <span class=\"main-nav menu\">\n          <NavLink to=\"/about\">J2KB?</NavLink>\n        </span>\n        <span class=\"main-nav menu\">\n          <NavLink to=\"/board\">Board</NavLink>\n        </span>\n        <span class=\"main-nav menu\">\n          <NavLink to=\"/til\">TIL</NavLink>\n        </span>\n        <span class=\"main-nav menu\">\n          {/* <NavLink to=\"/login\">Login</NavLink> */}\n          <React.Fragment>\n            <a onClick={this.handleShow.bind(this)}>로그인</a>\n            <Modal\n              open={this.state.setShow}\n              close={this.handleClose.bind(this)}\n              title=\"login\"\n            >\n              <div className=\"signIn_wrapper\">\n                <div className=\"signIn_box\">\n                  <div className=\"signIn_id\">\n                    <form action=\"\">\n                      <div className=\"signIn_email\">\n                        E-mail : <input type=\"text\"></input>\n                      </div>\n                      <div className=\"signIn_pw\">\n                        PW: <input type=\"password\"></input>\n                      </div>\n                      <button value=\"login\">로그인</button>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </Modal>\n          </React.Fragment>\n        </span>\n        <span class=\"main-nav menu\">\n          <NavLink to=\"/regist\">regist</NavLink>\n        </span>\n        <span class=\"main-nav menu\">\n          <NavLink to=\"/attendance\">Attendance</NavLink>\n        </span>\n        <span class=\"main-nav menu\">환영합니다!</span>\n        <img src={profile} alt=\"logged\" class=\"profile\" />\n      </div>\n    )\n  }\n}\n\nexport default Header\n","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/content.js",[],"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/footer.js",[],"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/regist.js",["64"],"import React, { Component, useRef } from \"react\";\nimport { useForm } from 'react-hook-form';\n\n\nfunction Regist() {\n\nconst { register, watch, errors, handleSubmit } = useForm();\nconsole.log(watch('email'))\n//watch는 해당 데이터를 확인한다.\nconst password = useRef();\n//validate를 위해 지정해준다.\npassword.current = watch(\"password\");\nconst onSubmit = (data) => {\n  console.log('data', data)\n}\n  return (\n    <form id=\"mainform\"\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      <div id=\"labelform\">이메일</div>\n      <input\n        class=\"maininput\"\n        name=\"email\"\n        type=\"email\"\n        placeholder=\"이메일을 입력해주세요.\"\n      ref={register({\n        //필수입력\n        reqired: true,\n        pattern: /^\\S+@\\S+$/i })}/>\n        {errors.email &&<p class=\"alert\">이메일을 제대로 입력해주세요.</p>}\n        <div id=\"labelform\">아이디</div>\n      <input\n        class=\"maininput\"\n        name=\"id\"\n        placeholder=\"아이디를 입력해주세요.(최대 8글자)\"\n        ref={register({ required: true, maxLength: 10, pattern: \"[a-zA-Z].+\" })}\n      />\n      {errors.id && errors.id.type === \"required\" && <p class=\"alert\">아이디가 입력되지 않았습니다.</p>}\n      {errors.id && errors.id.type === \"maxLength\" && <p class=\"alert\">아이디는 8글자 이내로 입력해주세요.</p>}\n      {errors.id && errors.id.type === \"pattern\" && <p class=\"alert\">아이디는 이내로 입력해주세요.</p>}\n        <div id=\"labelform\">이름</div>\n      <input\n        class=\"maininput\"\n        name=\"name\"\n        placeholder=\"이름을 입력해주세요.(최대 10글자)\"\n        ref={register({ required: true, maxLength: 10 })}\n      />\n      {errors.name && errors.name.type === \"required\" && <p class=\"alert\">이름이 입력되지 않았습니다.</p>}\n      {errors.name && errors.name.type === \"maxLength\" && <p class=\"alert\">이름은 10글자 이내로 입력해주세요.</p>}\n      <div id=\"labelform\">비밀번호</div>\n      <input\n        class=\"maininput\"\n        name=\"password\"\n        type=\"password\"\n        placeholder=\"비밀번호를 입력해주세요.(6~15글자)\"\n        ref={register({ required: true, minLength: 6, maxLength: 15 })}\n      />\n      {errors.password && errors.password.type === \"required\" && <p class=\"alert\">비밀번호가 입력되지 않았습니다.</p>}\n      {errors.password && errors.password.type === \"minLength\" && <p class=\"alert\">비밀번호는 6글자 이상 입력해주세요.</p>}\n      {errors.password && errors.password.type === \"maxLength\" && <p class=\"alert\">비밀번호는 15글자 이내로 입력해주세요.</p>}\n      <div id=\"labelform\">비밀번호 확인</div>\n      <input\n        class=\"maininput\"\n        name=\"password_confirm\"\n        type=\"password\"\n        placeholder=\"비밀번호를 입력해주세요.(6~15글자)\"\n        ref={register({\n          required: true,\n          //유효성 검사(위에서 password.current 지정해줘야함)\n          validate: (value) =>\n            value === password.current\n        })}\n      />\n      {errors.password_confirm && errors.password_confirm.type === \"required\" && <p class=\"alert\">비밀번호가 입력되지 않았습니다.</p>}\n      {errors.password_confirm && errors.password_confirm.type === \"validate\" && <p class=\"alert\">비밀번호가 일치하지 않습니다.</p>}\n      <input type=\"submit\" id=\"submit\" value=\"가입하기\"/>\n    </form>\n  );\n}\n\nexport default Regist;\n","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/til.js",[],"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/board.js",["65","66"],"import React, { Component, useState } from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faPlusSquare } from \"@fortawesome/free-solid-svg-icons\"\nimport \"../assets/css/boardMain.css\"\nimport { NavLink, Route, useParams } from \"react-router-dom\"\nimport BoardDetail from \"./boardDetail\"\n\nfunction Board(props) {\n  console.log(\"Board render\")\n\n  var boardContents = []\n  var i = props.data.length - 1\n  var num = 1\n  let [show, showChange] = useState(true)\n\n  while (i >= 0) {\n    boardContents.push(\n      <NavLink to={\"/board/\" + props.data[i].id}>\n        <div\n          className=\"board_contents\"\n          key={props.data[i].id}\n          onClick={() => showChange(false)}\n        >\n          <span className=\"board_num\">{num}</span>\n          <p className=\"contents_title\">{props.data[i].title}</p>\n        </div>\n      </NavLink>\n    )\n    i--\n    num++\n  }\n\n  return (\n    <div class=\"board-wrapper\">\n      <div className=\"board_box\">\n        <div className=\"board_top\">\n          <div className=\"board_title\">\n            <h1>게시판</h1>\n          </div>\n          <NavLink to=\"/boardInput\" className=\"board_inputBtn\">\n            <FontAwesomeIcon icon={faPlusSquare} />\n          </NavLink>\n        </div>\n        <div className=\"board_content\">\n          {show ? (\n            <div className=\"board_container\">{boardContents}</div>\n          ) : (\n            <Route path=\"/board/:topics_id\">\n              <BoardDetail data={props.data} show={showChange}></BoardDetail>\n            </Route>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Board\n","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/boardInput.js",["67","68","69"],"import React, { Component } from \"react\"\nimport \"../assets/css/boardInput.css\"\nimport Content from \"./content\"\nimport { Route, Switch, withRouter } from \"react-router-dom\"\n\nclass BoardInput extends Component {\n  go = () => {\n    this.props.history.goBack()\n  }\n  render(history) {\n    console.log(\"Board render\")\n    return (\n      <div class=\"addArticle-wrapper\">\n        <div className=\"addArticle_title\">\n          <h1>글쓰기</h1>\n        </div>\n\n        <div className=\"addArticle_container\">\n          <div className=\"addArticle_form\">\n            <form\n              action=\"/\"\n              method=\"post\"\n              onSubmit={function (e) {\n                e.preventDefault()\n                this.props.onSubmit(e.target.title.value, e.target.desc.value)\n                alert(\"goood\")\n              }.bind(this)}\n            >\n              <div className=\"addArticle_title\">\n                <h2>제목</h2>\n                <input type=\"text\" name=\"title\"></input>\n              </div>\n              <div className=\"addArticle_category\">\n                <h2>분류</h2>\n                <select>\n                  <option value=\"article\">article</option>\n                  <option value=\"til\">til</option>\n                </select>\n              </div>\n              <div className=\"addArticle_contents\">\n                <h2>내용</h2>\n                <textarea name=\"desc\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\n              </div>\n              <div className=\"addArticle_submit\">\n                <button onClick={this.go}>submit</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(BoardInput)\n","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/content_attendance.js",["70"],"import React, { Component } from \"react\"\n\nclass ContentAttend extends Component {\n  //render 필수\n  constructor(props){\n    super(props);\n    this.state = {\n        userId: 0,\n        // period : 2,\n        totalweeks: 11,\n        attendList: [1,1,0,1,0]\n    }\n  }\n  setUserInfo = (ID, weekCnt, attList) =>{\n    this.setState({\n      userID: ID,\n      // period: prd,\n      weeks: weekCnt,\n      attendList: attList\n    })\n  }\n\n  render() {\n\n\n    console.log(\"Content attendance render\");\n    const borderStyle = {\n      border: \"1px solid black\"\n    }\n    const weekList = [];\n\n\n    for(let i =0; i <this.state.totalweeks; ++i){\n        weekList.push({weekIdx: i, attendance: this.state.attendList[i]});\n    }\n    console.log(weekList);\n\n    function convertAttend(attend) {\n      if(attend === 0){\n        return \"결석 😢\";\n      }\n      else {\n        return attend && \"출석 😊\";\n      }\n\n    }\n\n    const weekRender = weekList.map((week, i) => {\n      return (\n        <div key = {i} className = \"AttendTable\">\n\n        <div className = \"WeekIdx\">{week.weekIdx+1} 주차</div>\n        <div className = {this.state.attendList[i] === 1? \"present\" :(this.state.attendList[i] === 0 ? \"absent\": \"Undefined\")}>\n\n          {convertAttend(week.attendance)}\n\n        </div>\n\n        </div>\n      );\n    })\n\n\n    return (\n      <div className = \"wrapperAttend\">\n        <div className = \"NavAttend\">\n          <ol>\n            <li> 출석부 </li>\n            <li> 주간목표 </li>\n          </ol>\n        </div>\n\n        <div className = \"MainAttend\">\n            {weekRender}\n        </div>\n      </div>\n\n\n    )\n  }\n}\n\nexport default ContentAttend\n","/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/modal.js",[],"/Users/hxmkim/Documents/GitHub/blooming-web-project/front/src/components/boardDetail.js",["71","72"],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"82","line":43,"column":13,"nodeType":"83","endLine":43,"endColumn":53},{"ruleId":"77","severity":1,"message":"84","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"84","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"85","line":5,"column":26,"nodeType":"79","messageId":"80","endLine":5,"endColumn":35},{"ruleId":"77","severity":1,"message":"86","line":3,"column":8,"nodeType":"79","messageId":"80","endLine":3,"endColumn":15},{"ruleId":"77","severity":1,"message":"87","line":4,"column":10,"nodeType":"79","messageId":"80","endLine":4,"endColumn":15},{"ruleId":"77","severity":1,"message":"88","line":4,"column":17,"nodeType":"79","messageId":"80","endLine":4,"endColumn":23},{"ruleId":"77","severity":1,"message":"89","line":27,"column":11,"nodeType":"79","messageId":"80","endLine":27,"endColumn":22},{"ruleId":"77","severity":1,"message":"84","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"90","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":17},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Component' is defined but never used.","'useParams' is defined but never used.","'Content' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'borderStyle' is assigned a value but never used.","'NavLink' is defined but never used.","no-global-assign","no-unsafe-negation"]